basePath: /
definitions:
  game.PlayerState:
    properties:
      cardCount:
        type: integer
      cards:
        items:
          type: string
        type: array
      id:
        type: string
      name:
        type: string
    type: object
  game.StateResponse:
    properties:
      gameId:
        type: string
      hasStarted:
        type: boolean
      isAbandoned:
        type: boolean
      players:
        items:
          $ref: '#/definitions/game.PlayerState'
        type: array
      requesterId:
        type: string
    type: object
  model.Game:
    properties:
      hasStarted:
        type: boolean
      id:
        type: string
      isAbandoned:
        type: boolean
      isComplete:
        type: boolean
      players:
        items:
          $ref: '#/definitions/model.User'
        type: array
      requester:
        $ref: '#/definitions/model.User'
      requesterID:
        type: string
      state:
        $ref: '#/definitions/model.GameState'
    type: object
  model.GameCard:
    properties:
      code:
        type: string
      gameID:
        type: string
      id:
        type: string
      userID:
        type: string
    type: object
  model.GamePlayer:
    properties:
      cards:
        items:
          $ref: '#/definitions/model.GameCard'
        type: array
      gameID:
        type: string
      isConnected:
        type: boolean
      joinOrder:
        type: integer
      user:
        $ref: '#/definitions/model.User'
      userID:
        type: string
    type: object
  model.GameSessionLog:
    properties:
      createdAt:
        type: string
      gameId:
        type: string
      id:
        type: string
      message:
        type: string
      type:
        type: string
      userId:
        type: string
    type: object
  model.GameState:
    properties:
      gameID:
        type: string
      players:
        items:
          $ref: '#/definitions/model.GamePlayer'
        type: array
    type: object
  model.User:
    properties:
      games:
        items:
          $ref: '#/definitions/model.Game'
        type: array
      id:
        type: string
      name:
        type: string
    type: object
info:
  contact: {}
  description: API for the Donkey card game
  title: Donkey API
  version: "1.0"
paths:
  /api/admin/game/{gameId}:
    get:
      description: Returns complete game information with all player cards
      parameters:
      - description: Game ID
        in: path
        name: gameId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/game.StateResponse'
      summary: Get full game state
      tags:
      - admin
  /api/game/{gameId}/logs:
    get:
      description: Retrieves chat and status logs for a game in reverse chronological
        order
      parameters:
      - description: Game ID
        in: path
        name: gameId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.GameSessionLog'
            type: array
      summary: List session logs
      tags:
      - events
  /api/game/{gameId}/state/{userId}:
    get:
      description: Returns current game state tailored for the requesting user
      parameters:
      - description: Game ID
        in: path
        name: gameId
        required: true
        type: string
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/game.StateResponse'
      summary: Get game state
      tags:
      - game
  /api/game/{gameId}/stream/{userId}:
    get:
      description: Streams session and state change events for a game
      parameters:
      - description: Game ID
        in: path
        name: gameId
        required: true
        type: string
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - text/event-stream
      responses:
        "200":
          description: event stream
          schema:
            type: string
      summary: Stream game updates
      tags:
      - events
  /api/hello:
    get:
      description: Simple hello world endpoint
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Returns a greeting
      tags:
      - example
  /api/user/{id}:
    get:
      parameters:
      - description: user id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get user
      tags:
      - user
  /api/users:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.User'
            type: array
      summary: List users
      tags:
      - user
  /api/version:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get server version
      tags:
      - meta
swagger: "2.0"
